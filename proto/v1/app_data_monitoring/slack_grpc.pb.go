// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package app_data_monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SlackAlertClient is the client API for SlackAlert service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlackAlertClient interface {
	Slack(ctx context.Context, in *SlackRequest, opts ...grpc.CallOption) (*SlackResponse, error)
}

type slackAlertClient struct {
	cc grpc.ClientConnInterface
}

func NewSlackAlertClient(cc grpc.ClientConnInterface) SlackAlertClient {
	return &slackAlertClient{cc}
}

func (c *slackAlertClient) Slack(ctx context.Context, in *SlackRequest, opts ...grpc.CallOption) (*SlackResponse, error) {
	out := new(SlackResponse)
	err := c.cc.Invoke(ctx, "/app_data_monitoring.v1.SlackAlert/Slack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlackAlertServer is the server API for SlackAlert service.
// All implementations must embed UnimplementedSlackAlertServer
// for forward compatibility
type SlackAlertServer interface {
	Slack(context.Context, *SlackRequest) (*SlackResponse, error)
	mustEmbedUnimplementedSlackAlertServer()
}

// UnimplementedSlackAlertServer must be embedded to have forward compatible implementations.
type UnimplementedSlackAlertServer struct {
}

func (UnimplementedSlackAlertServer) Slack(context.Context, *SlackRequest) (*SlackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Slack not implemented")
}
func (UnimplementedSlackAlertServer) mustEmbedUnimplementedSlackAlertServer() {}

// UnsafeSlackAlertServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlackAlertServer will
// result in compilation errors.
type UnsafeSlackAlertServer interface {
	mustEmbedUnimplementedSlackAlertServer()
}

func RegisterSlackAlertServer(s grpc.ServiceRegistrar, srv SlackAlertServer) {
	s.RegisterService(&SlackAlert_ServiceDesc, srv)
}

func _SlackAlert_Slack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackAlertServer).Slack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_data_monitoring.v1.SlackAlert/Slack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackAlertServer).Slack(ctx, req.(*SlackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SlackAlert_ServiceDesc is the grpc.ServiceDesc for SlackAlert service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlackAlert_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_data_monitoring.v1.SlackAlert",
	HandlerType: (*SlackAlertServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Slack",
			Handler:    _SlackAlert_Slack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/app_data_monitoring/slack.proto",
}
