// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package app_data_monitoring_bp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SlackAlertServiceClient is the client API for SlackAlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlackAlertServiceClient interface {
	CreateButtonAlertNotification(ctx context.Context, in *SlackButtonRequest, opts ...grpc.CallOption) (*SlackButtontResponse, error)
}

type slackAlertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSlackAlertServiceClient(cc grpc.ClientConnInterface) SlackAlertServiceClient {
	return &slackAlertServiceClient{cc}
}

func (c *slackAlertServiceClient) CreateButtonAlertNotification(ctx context.Context, in *SlackButtonRequest, opts ...grpc.CallOption) (*SlackButtontResponse, error) {
	out := new(SlackButtontResponse)
	err := c.cc.Invoke(ctx, "/app_data_monitoring.v1.SlackAlertService/CreateButtonAlertNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlackAlertServiceServer is the server API for SlackAlertService service.
// All implementations should embed UnimplementedSlackAlertServiceServer
// for forward compatibility
type SlackAlertServiceServer interface {
	CreateButtonAlertNotification(context.Context, *SlackButtonRequest) (*SlackButtontResponse, error)
}

// UnimplementedSlackAlertServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSlackAlertServiceServer struct {
}

func (UnimplementedSlackAlertServiceServer) CreateButtonAlertNotification(context.Context, *SlackButtonRequest) (*SlackButtontResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateButtonAlertNotification not implemented")
}

// UnsafeSlackAlertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlackAlertServiceServer will
// result in compilation errors.
type UnsafeSlackAlertServiceServer interface {
	mustEmbedUnimplementedSlackAlertServiceServer()
}

func RegisterSlackAlertServiceServer(s grpc.ServiceRegistrar, srv SlackAlertServiceServer) {
	s.RegisterService(&_SlackAlertService_serviceDesc, srv)
}

func _SlackAlertService_CreateButtonAlertNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlackButtonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackAlertServiceServer).CreateButtonAlertNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_data_monitoring.v1.SlackAlertService/CreateButtonAlertNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackAlertServiceServer).CreateButtonAlertNotification(ctx, req.(*SlackButtonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SlackAlertService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app_data_monitoring.v1.SlackAlertService",
	HandlerType: (*SlackAlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateButtonAlertNotification",
			Handler:    _SlackAlertService_CreateButtonAlertNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/app_data_monitoring_bp/alert.proto",
}
