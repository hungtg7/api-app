// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.17.3
// source: v1/app_data_monitoring_bp/alert.proto

package app_data_monitoring_bp

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SlackButtonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string                        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	User                *SlackButtonRequest_User      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	ApiAppId            string                        `protobuf:"bytes,3,opt,name=api_app_id,json=apiAppId,proto3" json:"api_app_id,omitempty"`
	Token               string                        `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Container           *SlackButtonRequest_Container `protobuf:"bytes,5,opt,name=container,proto3" json:"container,omitempty"`
	TriggerId           string                        `protobuf:"bytes,6,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	Team                *SlackButtonRequest_Team      `protobuf:"bytes,7,opt,name=team,proto3" json:"team,omitempty"`
	Enterprise          *anypb.Any                    `protobuf:"bytes,8,opt,name=enterprise,proto3" json:"enterprise,omitempty"`
	IsEnterpriseInstall bool                          `protobuf:"varint,9,opt,name=is_enterprise_install,json=isEnterpriseInstall,proto3" json:"is_enterprise_install,omitempty"`
	State               *SlackButtonRequest_State     `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	ResponseUrl         string                        `protobuf:"bytes,11,opt,name=response_url,json=responseUrl,proto3" json:"response_url,omitempty"`
	Actions             []*SlackButtonRequest_Actions `protobuf:"bytes,12,rep,name=actions,proto3" json:"actions,omitempty"`
	Challenge           string                        `protobuf:"bytes,13,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *SlackButtonRequest) Reset() {
	*x = SlackButtonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackButtonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackButtonRequest) ProtoMessage() {}

func (x *SlackButtonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackButtonRequest.ProtoReflect.Descriptor instead.
func (*SlackButtonRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0}
}

func (x *SlackButtonRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SlackButtonRequest) GetUser() *SlackButtonRequest_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SlackButtonRequest) GetApiAppId() string {
	if x != nil {
		return x.ApiAppId
	}
	return ""
}

func (x *SlackButtonRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SlackButtonRequest) GetContainer() *SlackButtonRequest_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *SlackButtonRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

func (x *SlackButtonRequest) GetTeam() *SlackButtonRequest_Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *SlackButtonRequest) GetEnterprise() *anypb.Any {
	if x != nil {
		return x.Enterprise
	}
	return nil
}

func (x *SlackButtonRequest) GetIsEnterpriseInstall() bool {
	if x != nil {
		return x.IsEnterpriseInstall
	}
	return false
}

func (x *SlackButtonRequest) GetState() *SlackButtonRequest_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SlackButtonRequest) GetResponseUrl() string {
	if x != nil {
		return x.ResponseUrl
	}
	return ""
}

func (x *SlackButtonRequest) GetActions() []*SlackButtonRequest_Actions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *SlackButtonRequest) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

type SlackButtontResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SlackButtontResponse) Reset() {
	*x = SlackButtontResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackButtontResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackButtontResponse) ProtoMessage() {}

func (x *SlackButtontResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackButtontResponse.ProtoReflect.Descriptor instead.
func (*SlackButtontResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{1}
}

func (x *SlackButtontResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SlackButtontResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SlackButtonRequest_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TeamId   string `protobuf:"bytes,4,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *SlackButtonRequest_User) Reset() {
	*x = SlackButtonRequest_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackButtonRequest_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackButtonRequest_User) ProtoMessage() {}

func (x *SlackButtonRequest_User) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackButtonRequest_User.ProtoReflect.Descriptor instead.
func (*SlackButtonRequest_User) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SlackButtonRequest_User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SlackButtonRequest_User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SlackButtonRequest_User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SlackButtonRequest_User) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type SlackButtonRequest_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SlackButtonRequest_Container) Reset() {
	*x = SlackButtonRequest_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackButtonRequest_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackButtonRequest_Container) ProtoMessage() {}

func (x *SlackButtonRequest_Container) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackButtonRequest_Container.ProtoReflect.Descriptor instead.
func (*SlackButtonRequest_Container) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SlackButtonRequest_Container) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SlackButtonRequest_Container) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SlackButtonRequest_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *SlackButtonRequest_Team) Reset() {
	*x = SlackButtonRequest_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackButtonRequest_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackButtonRequest_Team) ProtoMessage() {}

func (x *SlackButtonRequest_Team) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackButtonRequest_Team.ProtoReflect.Descriptor instead.
func (*SlackButtonRequest_Team) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SlackButtonRequest_Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SlackButtonRequest_Team) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type SlackButtonRequest_Values struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SlackButtonRequest_Values) Reset() {
	*x = SlackButtonRequest_Values{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackButtonRequest_Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackButtonRequest_Values) ProtoMessage() {}

func (x *SlackButtonRequest_Values) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackButtonRequest_Values.ProtoReflect.Descriptor instead.
func (*SlackButtonRequest_Values) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 3}
}

type SlackButtonRequest_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values *SlackButtonRequest_Values `protobuf:"bytes,1,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *SlackButtonRequest_State) Reset() {
	*x = SlackButtonRequest_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackButtonRequest_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackButtonRequest_State) ProtoMessage() {}

func (x *SlackButtonRequest_State) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackButtonRequest_State.ProtoReflect.Descriptor instead.
func (*SlackButtonRequest_State) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 4}
}

func (x *SlackButtonRequest_State) GetValues() *SlackButtonRequest_Values {
	if x != nil {
		return x.Values
	}
	return nil
}

type SlackButtonRequest_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Emoji bool   `protobuf:"varint,3,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *SlackButtonRequest_Text) Reset() {
	*x = SlackButtonRequest_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackButtonRequest_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackButtonRequest_Text) ProtoMessage() {}

func (x *SlackButtonRequest_Text) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackButtonRequest_Text.ProtoReflect.Descriptor instead.
func (*SlackButtonRequest_Text) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 5}
}

func (x *SlackButtonRequest_Text) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SlackButtonRequest_Text) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SlackButtonRequest_Text) GetEmoji() bool {
	if x != nil {
		return x.Emoji
	}
	return false
}

type SlackButtonRequest_Actions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	BlockId  string                   `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	ActionId string                   `protobuf:"bytes,3,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	Text     *SlackButtonRequest_Text `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Value    string                   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	ActionTs string                   `protobuf:"bytes,6,opt,name=action_ts,json=actionTs,proto3" json:"action_ts,omitempty"`
}

func (x *SlackButtonRequest_Actions) Reset() {
	*x = SlackButtonRequest_Actions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackButtonRequest_Actions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackButtonRequest_Actions) ProtoMessage() {}

func (x *SlackButtonRequest_Actions) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackButtonRequest_Actions.ProtoReflect.Descriptor instead.
func (*SlackButtonRequest_Actions) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 6}
}

func (x *SlackButtonRequest_Actions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SlackButtonRequest_Actions) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *SlackButtonRequest_Actions) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *SlackButtonRequest_Actions) GetText() *SlackButtonRequest_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SlackButtonRequest_Actions) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SlackButtonRequest_Actions) GetActionTs() string {
	if x != nil {
		return x.ActionTs
	}
	return ""
}

var File_v1_app_data_monitoring_bp_alert_proto protoreflect.FileDescriptor

var file_v1_app_data_monitoring_bp_alert_proto_rawDesc = []byte{
	0x0a, 0x25, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x70, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x09, 0x0a, 0x12, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70,
	0x69, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x52, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x46,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a, 0x5f, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a, 0x33, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x2e, 0x0a, 0x04, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x08, 0x0a, 0x06, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x1a,
	0xcd, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6c, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x73, 0x22,
	0x44, 0x0a, 0x14, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xb1, 0x01, 0x0a, 0x11, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x81, 0x02, 0x5a, 0x55, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6e, 0x67, 0x74, 0x72, 0x61,
	0x6e, 0x31, 0x35, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x70, 0x3b, 0x61, 0x70, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x70, 0x92, 0x41, 0xa6, 0x01, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x5a, 0x59,
	0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x62,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x72, 0x36, 0x0a, 0x0c, 0x67, 0x52, 0x50, 0x43, 0x2d, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x26, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6e, 0x67, 0x74, 0x72,
	0x61, 0x6e, 0x31, 0x35, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x70, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_app_data_monitoring_bp_alert_proto_rawDescOnce sync.Once
	file_v1_app_data_monitoring_bp_alert_proto_rawDescData = file_v1_app_data_monitoring_bp_alert_proto_rawDesc
)

func file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP() []byte {
	file_v1_app_data_monitoring_bp_alert_proto_rawDescOnce.Do(func() {
		file_v1_app_data_monitoring_bp_alert_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_app_data_monitoring_bp_alert_proto_rawDescData)
	})
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescData
}

var file_v1_app_data_monitoring_bp_alert_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_v1_app_data_monitoring_bp_alert_proto_goTypes = []interface{}{
	(*SlackButtonRequest)(nil),           // 0: app_data_monitoring.v1.SlackButtonRequest
	(*SlackButtontResponse)(nil),         // 1: app_data_monitoring.v1.SlackButtontResponse
	(*SlackButtonRequest_User)(nil),      // 2: app_data_monitoring.v1.SlackButtonRequest.User
	(*SlackButtonRequest_Container)(nil), // 3: app_data_monitoring.v1.SlackButtonRequest.Container
	(*SlackButtonRequest_Team)(nil),      // 4: app_data_monitoring.v1.SlackButtonRequest.Team
	(*SlackButtonRequest_Values)(nil),    // 5: app_data_monitoring.v1.SlackButtonRequest.Values
	(*SlackButtonRequest_State)(nil),     // 6: app_data_monitoring.v1.SlackButtonRequest.State
	(*SlackButtonRequest_Text)(nil),      // 7: app_data_monitoring.v1.SlackButtonRequest.Text
	(*SlackButtonRequest_Actions)(nil),   // 8: app_data_monitoring.v1.SlackButtonRequest.Actions
	(*anypb.Any)(nil),                    // 9: google.protobuf.Any
}
var file_v1_app_data_monitoring_bp_alert_proto_depIdxs = []int32{
	2, // 0: app_data_monitoring.v1.SlackButtonRequest.user:type_name -> app_data_monitoring.v1.SlackButtonRequest.User
	3, // 1: app_data_monitoring.v1.SlackButtonRequest.container:type_name -> app_data_monitoring.v1.SlackButtonRequest.Container
	4, // 2: app_data_monitoring.v1.SlackButtonRequest.team:type_name -> app_data_monitoring.v1.SlackButtonRequest.Team
	9, // 3: app_data_monitoring.v1.SlackButtonRequest.enterprise:type_name -> google.protobuf.Any
	6, // 4: app_data_monitoring.v1.SlackButtonRequest.state:type_name -> app_data_monitoring.v1.SlackButtonRequest.State
	8, // 5: app_data_monitoring.v1.SlackButtonRequest.actions:type_name -> app_data_monitoring.v1.SlackButtonRequest.Actions
	5, // 6: app_data_monitoring.v1.SlackButtonRequest.State.values:type_name -> app_data_monitoring.v1.SlackButtonRequest.Values
	7, // 7: app_data_monitoring.v1.SlackButtonRequest.Actions.text:type_name -> app_data_monitoring.v1.SlackButtonRequest.Text
	0, // 8: app_data_monitoring.v1.SlackAlertService.CreateButtonAlertNotification:input_type -> app_data_monitoring.v1.SlackButtonRequest
	1, // 9: app_data_monitoring.v1.SlackAlertService.CreateButtonAlertNotification:output_type -> app_data_monitoring.v1.SlackButtontResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_v1_app_data_monitoring_bp_alert_proto_init() }
func file_v1_app_data_monitoring_bp_alert_proto_init() {
	if File_v1_app_data_monitoring_bp_alert_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackButtonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackButtontResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackButtonRequest_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackButtonRequest_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackButtonRequest_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackButtonRequest_Values); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackButtonRequest_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackButtonRequest_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackButtonRequest_Actions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_app_data_monitoring_bp_alert_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_app_data_monitoring_bp_alert_proto_goTypes,
		DependencyIndexes: file_v1_app_data_monitoring_bp_alert_proto_depIdxs,
		MessageInfos:      file_v1_app_data_monitoring_bp_alert_proto_msgTypes,
	}.Build()
	File_v1_app_data_monitoring_bp_alert_proto = out.File
	file_v1_app_data_monitoring_bp_alert_proto_rawDesc = nil
	file_v1_app_data_monitoring_bp_alert_proto_goTypes = nil
	file_v1_app_data_monitoring_bp_alert_proto_depIdxs = nil
}
