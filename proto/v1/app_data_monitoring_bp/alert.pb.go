// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.17.3
// source: v1/app_data_monitoring_bp/alert.proto

package app_data_monitoring_bp

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SlackAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string                             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Actions         []*SlackAlertRequest_Actions       `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	CallbackId      string                             `protobuf:"bytes,3,opt,name=callback_id,json=callbackId,proto3" json:"callback_id,omitempty"`
	Team            *SlackAlertRequest_Team            `protobuf:"bytes,4,opt,name=team,proto3" json:"team,omitempty"`
	Channel         *SlackAlertRequest_Channel         `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	User            *SlackAlertRequest_User            `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	ActionTs        string                             `protobuf:"bytes,7,opt,name=action_ts,json=actionTs,proto3" json:"action_ts,omitempty"`
	MessageTs       string                             `protobuf:"bytes,8,opt,name=message_ts,json=messageTs,proto3" json:"message_ts,omitempty"`
	AttachmentId    string                             `protobuf:"bytes,9,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	Token           string                             `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`
	IsAppUnfurl     bool                               `protobuf:"varint,11,opt,name=is_app_unfurl,json=isAppUnfurl,proto3" json:"is_app_unfurl,omitempty"`
	OriginalMessage *SlackAlertRequest_OriginalMessage `protobuf:"bytes,12,opt,name=original_message,json=originalMessage,proto3" json:"original_message,omitempty"`
	ResponseUrl     string                             `protobuf:"bytes,13,opt,name=response_url,json=responseUrl,proto3" json:"response_url,omitempty"`
	TriggerId       string                             `protobuf:"bytes,14,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
}

func (x *SlackAlertRequest) Reset() {
	*x = SlackAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAlertRequest) ProtoMessage() {}

func (x *SlackAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAlertRequest.ProtoReflect.Descriptor instead.
func (*SlackAlertRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0}
}

func (x *SlackAlertRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SlackAlertRequest) GetActions() []*SlackAlertRequest_Actions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *SlackAlertRequest) GetCallbackId() string {
	if x != nil {
		return x.CallbackId
	}
	return ""
}

func (x *SlackAlertRequest) GetTeam() *SlackAlertRequest_Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *SlackAlertRequest) GetChannel() *SlackAlertRequest_Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *SlackAlertRequest) GetUser() *SlackAlertRequest_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SlackAlertRequest) GetActionTs() string {
	if x != nil {
		return x.ActionTs
	}
	return ""
}

func (x *SlackAlertRequest) GetMessageTs() string {
	if x != nil {
		return x.MessageTs
	}
	return ""
}

func (x *SlackAlertRequest) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

func (x *SlackAlertRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SlackAlertRequest) GetIsAppUnfurl() bool {
	if x != nil {
		return x.IsAppUnfurl
	}
	return false
}

func (x *SlackAlertRequest) GetOriginalMessage() *SlackAlertRequest_OriginalMessage {
	if x != nil {
		return x.OriginalMessage
	}
	return nil
}

func (x *SlackAlertRequest) GetResponseUrl() string {
	if x != nil {
		return x.ResponseUrl
	}
	return ""
}

func (x *SlackAlertRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

type SlackAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SlackAlertResponse) Reset() {
	*x = SlackAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAlertResponse) ProtoMessage() {}

func (x *SlackAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAlertResponse.ProtoReflect.Descriptor instead.
func (*SlackAlertResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{1}
}

func (x *SlackAlertResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type SlackAlertRequest_SelectedOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SlackAlertRequest_SelectedOptions) Reset() {
	*x = SlackAlertRequest_SelectedOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAlertRequest_SelectedOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAlertRequest_SelectedOptions) ProtoMessage() {}

func (x *SlackAlertRequest_SelectedOptions) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAlertRequest_SelectedOptions.ProtoReflect.Descriptor instead.
func (*SlackAlertRequest_SelectedOptions) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SlackAlertRequest_SelectedOptions) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SlackAlertRequest_Actions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type            string                               `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	SelectedOptions []*SlackAlertRequest_SelectedOptions `protobuf:"bytes,3,rep,name=selected_options,json=selectedOptions,proto3" json:"selected_options,omitempty"`
}

func (x *SlackAlertRequest_Actions) Reset() {
	*x = SlackAlertRequest_Actions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAlertRequest_Actions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAlertRequest_Actions) ProtoMessage() {}

func (x *SlackAlertRequest_Actions) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAlertRequest_Actions.ProtoReflect.Descriptor instead.
func (*SlackAlertRequest_Actions) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SlackAlertRequest_Actions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SlackAlertRequest_Actions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SlackAlertRequest_Actions) GetSelectedOptions() []*SlackAlertRequest_SelectedOptions {
	if x != nil {
		return x.SelectedOptions
	}
	return nil
}

type SlackAlertRequest_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *SlackAlertRequest_Team) Reset() {
	*x = SlackAlertRequest_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAlertRequest_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAlertRequest_Team) ProtoMessage() {}

func (x *SlackAlertRequest_Team) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAlertRequest_Team.ProtoReflect.Descriptor instead.
func (*SlackAlertRequest_Team) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SlackAlertRequest_Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SlackAlertRequest_Team) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type SlackAlertRequest_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SlackAlertRequest_Channel) Reset() {
	*x = SlackAlertRequest_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAlertRequest_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAlertRequest_Channel) ProtoMessage() {}

func (x *SlackAlertRequest_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAlertRequest_Channel.ProtoReflect.Descriptor instead.
func (*SlackAlertRequest_Channel) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SlackAlertRequest_Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SlackAlertRequest_Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SlackAlertRequest_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SlackAlertRequest_User) Reset() {
	*x = SlackAlertRequest_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAlertRequest_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAlertRequest_User) ProtoMessage() {}

func (x *SlackAlertRequest_User) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAlertRequest_User.ProtoReflect.Descriptor instead.
func (*SlackAlertRequest_User) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 4}
}

func (x *SlackAlertRequest_User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SlackAlertRequest_User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SlackAlertRequest_Actions1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Text       string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Type       string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	DataSource string `protobuf:"bytes,5,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
}

func (x *SlackAlertRequest_Actions1) Reset() {
	*x = SlackAlertRequest_Actions1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAlertRequest_Actions1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAlertRequest_Actions1) ProtoMessage() {}

func (x *SlackAlertRequest_Actions1) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAlertRequest_Actions1.ProtoReflect.Descriptor instead.
func (*SlackAlertRequest_Actions1) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 5}
}

func (x *SlackAlertRequest_Actions1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SlackAlertRequest_Actions1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SlackAlertRequest_Actions1) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SlackAlertRequest_Actions1) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SlackAlertRequest_Actions1) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

type SlackAlertRequest_Attachments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallbackId string                        `protobuf:"bytes,1,opt,name=callback_id,json=callbackId,proto3" json:"callback_id,omitempty"`
	Text       string                        `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Id         uint32                        `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Color      string                        `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	Actions    []*SlackAlertRequest_Actions1 `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions,omitempty"`
	Fallback   string                        `protobuf:"bytes,6,opt,name=fallback,proto3" json:"fallback,omitempty"`
}

func (x *SlackAlertRequest_Attachments) Reset() {
	*x = SlackAlertRequest_Attachments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAlertRequest_Attachments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAlertRequest_Attachments) ProtoMessage() {}

func (x *SlackAlertRequest_Attachments) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAlertRequest_Attachments.ProtoReflect.Descriptor instead.
func (*SlackAlertRequest_Attachments) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 6}
}

func (x *SlackAlertRequest_Attachments) GetCallbackId() string {
	if x != nil {
		return x.CallbackId
	}
	return ""
}

func (x *SlackAlertRequest_Attachments) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SlackAlertRequest_Attachments) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SlackAlertRequest_Attachments) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SlackAlertRequest_Attachments) GetActions() []*SlackAlertRequest_Actions1 {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *SlackAlertRequest_Attachments) GetFallback() string {
	if x != nil {
		return x.Fallback
	}
	return ""
}

type SlackAlertRequest_OriginalMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        string                           `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Username    string                           `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	BotId       string                           `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Attachments []*SlackAlertRequest_Attachments `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
	Type        string                           `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Subtype     string                           `protobuf:"bytes,6,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Ts          string                           `protobuf:"bytes,7,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *SlackAlertRequest_OriginalMessage) Reset() {
	*x = SlackAlertRequest_OriginalMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAlertRequest_OriginalMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAlertRequest_OriginalMessage) ProtoMessage() {}

func (x *SlackAlertRequest_OriginalMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_data_monitoring_bp_alert_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAlertRequest_OriginalMessage.ProtoReflect.Descriptor instead.
func (*SlackAlertRequest_OriginalMessage) Descriptor() ([]byte, []int) {
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP(), []int{0, 7}
}

func (x *SlackAlertRequest_OriginalMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SlackAlertRequest_OriginalMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SlackAlertRequest_OriginalMessage) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *SlackAlertRequest_OriginalMessage) GetAttachments() []*SlackAlertRequest_Attachments {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *SlackAlertRequest_OriginalMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SlackAlertRequest_OriginalMessage) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *SlackAlertRequest_OriginalMessage) GetTs() string {
	if x != nil {
		return x.Ts
	}
	return ""
}

var File_v1_app_data_monitoring_bp_alert_proto protoreflect.FileDescriptor

var file_v1_app_data_monitoring_bp_alert_proto_rawDesc = []byte{
	0x0a, 0x25, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x70, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x0c,
	0x0a, 0x11, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c,
	0x61, 0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x6e, 0x66, 0x75,
	0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x70, 0x70, 0x55,
	0x6e, 0x66, 0x75, 0x72, 0x6c, 0x12, 0x65, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x28,
	0x0a, 0x10, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x98, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x10,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x2e, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x1a, 0x2d, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x2a, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x77,
	0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xd2, 0x01, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x31, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0xf0, 0x01, 0x0a,
	0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x73, 0x22,
	0x28, 0x0a, 0x12, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x9b, 0x01, 0x0a, 0x0c, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x84, 0x02, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6e, 0x67, 0x74, 0x72, 0x61, 0x6e, 0x31,
	0x35, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x70, 0x3b, 0x61, 0x70, 0x70, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x70, 0x92, 0x41, 0xa9, 0x01, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x02, 0x5a,
	0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12,
	0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0a, 0x0a, 0x08, 0x0a, 0x06,
	0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x72, 0x36, 0x0a, 0x0c, 0x67, 0x52, 0x50, 0x43, 0x2d, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x26, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6e, 0x67, 0x74,
	0x72, 0x61, 0x6e, 0x31, 0x35, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x70, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_app_data_monitoring_bp_alert_proto_rawDescOnce sync.Once
	file_v1_app_data_monitoring_bp_alert_proto_rawDescData = file_v1_app_data_monitoring_bp_alert_proto_rawDesc
)

func file_v1_app_data_monitoring_bp_alert_proto_rawDescGZIP() []byte {
	file_v1_app_data_monitoring_bp_alert_proto_rawDescOnce.Do(func() {
		file_v1_app_data_monitoring_bp_alert_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_app_data_monitoring_bp_alert_proto_rawDescData)
	})
	return file_v1_app_data_monitoring_bp_alert_proto_rawDescData
}

var file_v1_app_data_monitoring_bp_alert_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_v1_app_data_monitoring_bp_alert_proto_goTypes = []interface{}{
	(*SlackAlertRequest)(nil),                 // 0: app_data_monitoring.v1.SlackAlertRequest
	(*SlackAlertResponse)(nil),                // 1: app_data_monitoring.v1.SlackAlertResponse
	(*SlackAlertRequest_SelectedOptions)(nil), // 2: app_data_monitoring.v1.SlackAlertRequest.Selected_options
	(*SlackAlertRequest_Actions)(nil),         // 3: app_data_monitoring.v1.SlackAlertRequest.Actions
	(*SlackAlertRequest_Team)(nil),            // 4: app_data_monitoring.v1.SlackAlertRequest.Team
	(*SlackAlertRequest_Channel)(nil),         // 5: app_data_monitoring.v1.SlackAlertRequest.Channel
	(*SlackAlertRequest_User)(nil),            // 6: app_data_monitoring.v1.SlackAlertRequest.User
	(*SlackAlertRequest_Actions1)(nil),        // 7: app_data_monitoring.v1.SlackAlertRequest.Actions1
	(*SlackAlertRequest_Attachments)(nil),     // 8: app_data_monitoring.v1.SlackAlertRequest.Attachments
	(*SlackAlertRequest_OriginalMessage)(nil), // 9: app_data_monitoring.v1.SlackAlertRequest.Original_message
}
var file_v1_app_data_monitoring_bp_alert_proto_depIdxs = []int32{
	3, // 0: app_data_monitoring.v1.SlackAlertRequest.actions:type_name -> app_data_monitoring.v1.SlackAlertRequest.Actions
	4, // 1: app_data_monitoring.v1.SlackAlertRequest.team:type_name -> app_data_monitoring.v1.SlackAlertRequest.Team
	5, // 2: app_data_monitoring.v1.SlackAlertRequest.channel:type_name -> app_data_monitoring.v1.SlackAlertRequest.Channel
	6, // 3: app_data_monitoring.v1.SlackAlertRequest.user:type_name -> app_data_monitoring.v1.SlackAlertRequest.User
	9, // 4: app_data_monitoring.v1.SlackAlertRequest.original_message:type_name -> app_data_monitoring.v1.SlackAlertRequest.Original_message
	2, // 5: app_data_monitoring.v1.SlackAlertRequest.Actions.selected_options:type_name -> app_data_monitoring.v1.SlackAlertRequest.Selected_options
	7, // 6: app_data_monitoring.v1.SlackAlertRequest.Attachments.actions:type_name -> app_data_monitoring.v1.SlackAlertRequest.Actions1
	8, // 7: app_data_monitoring.v1.SlackAlertRequest.Original_message.attachments:type_name -> app_data_monitoring.v1.SlackAlertRequest.Attachments
	0, // 8: app_data_monitoring.v1.AlertService.CreateAlertNotification:input_type -> app_data_monitoring.v1.SlackAlertRequest
	1, // 9: app_data_monitoring.v1.AlertService.CreateAlertNotification:output_type -> app_data_monitoring.v1.SlackAlertResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_v1_app_data_monitoring_bp_alert_proto_init() }
func file_v1_app_data_monitoring_bp_alert_proto_init() {
	if File_v1_app_data_monitoring_bp_alert_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAlertRequest_SelectedOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAlertRequest_Actions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAlertRequest_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAlertRequest_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAlertRequest_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAlertRequest_Actions1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAlertRequest_Attachments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_data_monitoring_bp_alert_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAlertRequest_OriginalMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_app_data_monitoring_bp_alert_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_app_data_monitoring_bp_alert_proto_goTypes,
		DependencyIndexes: file_v1_app_data_monitoring_bp_alert_proto_depIdxs,
		MessageInfos:      file_v1_app_data_monitoring_bp_alert_proto_msgTypes,
	}.Build()
	File_v1_app_data_monitoring_bp_alert_proto = out.File
	file_v1_app_data_monitoring_bp_alert_proto_rawDesc = nil
	file_v1_app_data_monitoring_bp_alert_proto_goTypes = nil
	file_v1_app_data_monitoring_bp_alert_proto_depIdxs = nil
}
